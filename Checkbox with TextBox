Here is a detailed step-by-step guide to build the 'SPO Site Downloader' form using Visual Studio Code, Bootstrap, and React:

### Step 1: Set Up the Project

1. **Install Node.js**: Ensure you have Node.js installed. Download and install it from [nodejs.org](https://nodejs.org/).

2. **Create a React App**:
    ```bash
    npx create-react-app spo-site-downloader
    cd spo-site-downloader
    ```

3. **Install Bootstrap**:
    ```bash
    npm install bootstrap
    ```

4. **Add Bootstrap CSS**:
    Add the following line to `src/index.js`:
    ```javascript
    import 'bootstrap/dist/css/bootstrap.min.css';
    ```

### Step 2: Create the Form Structure

1. **Create Components**:
    Create the following component files in `src/components`:
    - `PageTitle.js`
    - `PageDescription.js`
    - `Favicon.js`
    - `SiteURL.js`
    - `Assets.js`
    - `ZipContent.js`
    - `DownloadLocation.js`
    - `SubmitButton.js`
    - `MainForm.js`

### Step 3: Build Each Component

1. **PageTitle.js**:
    ```javascript
    import React from 'react';

    const PageTitle = () => {
        return <h1 className="text-center my-4">SPO Site Downloader</h1>;
    };

    export default PageTitle;
    ```

2. **PageDescription.js**:
    ```javascript
    import React from 'react';

    const PageDescription = () => {
        return <p className="text-center mb-4">Download and manage SPO site content efficiently.</p>;
    };

    export default PageDescription;
    ```

3. **Favicon.js**:
    Add the favicon link in `public/index.html`:
    ```html
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    ```

4. **SiteURL.js**:
    ```javascript
    import React, { useState } from 'react';
    import jsonData from '../data/sites.json';

    const SiteURL = ({ handleInputChange, errors }) => {
        const [suggestions, setSuggestions] = useState([]);
        const [text, setText] = useState("");

        const onTextChanged = (e) => {
            const value = e.target.value;
            setText(value);
            if (value.length > 0) {
                const regex = new RegExp(`^${value}`, 'i');
                setSuggestions(jsonData.filter(v => regex.test(v)));
            } else {
                setSuggestions([]);
            }
        };

        const suggestionSelected = (value) => {
            setText(value);
            setSuggestions([]);
        };

        return (
            <div className="form-group">
                <label htmlFor="siteUrl">Site URL</label>
                <input
                    type="text"
                    className={`form-control ${errors.siteUrl ? 'is-invalid' : ''}`}
                    id="siteUrl"
                    name="siteUrl"
                    value={text}
                    onChange={(e) => { onTextChanged(e); handleInputChange(e); }}
                    onBlur={(e) => handleInputChange(e)}
                />
                <div className="suggestions">
                    {suggestions.map((item, index) => <div key={index} onClick={() => suggestionSelected(item)}>{item}</div>)}
                </div>
                {errors.siteUrl && <div className="text-danger">{errors.siteUrl}</div>}
            </div>
        );
    };

    export default SiteURL;
    ```

5. **Assets.js**:
    ```javascript
    import React, { useState } from 'react';

    const Assets = ({ handleInputChange, errors }) => {
        const [showTextBoxes, setShowTextBoxes] = useState({ library: false, list: false, folder: false });

        const handleCheckboxChange = (e) => {
            const { name, checked } = e.target;
            handleInputChange(e);
            setShowTextBoxes({ ...showTextBoxes, [name]: checked });
        };

        return (
            <div className="form-group">
                <label>Assets</label>
                <div className="form-check">
                    <input
                        type="checkbox"
                        className={`form-check-input ${errors.assets ? 'is-invalid' : ''}`}
                        id="all"
                        name="all"
                        onChange={handleCheckboxChange}
                    />
                    <label className="form-check-label" htmlFor="all">All</label>
                </div>
                {['library', 'list', 'folder'].map((asset, index) => (
                    <div key={index} className="form-check">
                        <input
                            type="checkbox"
                            className={`form-check-input ${errors.assets ? 'is-invalid' : ''}`}
                            id={asset}
                            name={asset}
                            onChange={handleCheckboxChange}
                        />
                        <label className="form-check-label" htmlFor={asset}>{asset.charAt(0).toUpperCase() + asset.slice(1)}</label>
                        {showTextBoxes[asset] && (
                            <input
                                type="text"
                                className="form-control mt-2"
                                placeholder="Enter relative URL only"
                                name={`${asset}Url`}
                                onChange={handleInputChange}
                            />
                        )}
                    </div>
                ))}
                {errors.assets && <div className="text-danger">{errors.assets}</div>}
            </div>
        );
    };

    export default Assets;
    ```

6. **ZipContent.js**:
    ```javascript
    import React from 'react';

    const ZipContent = ({ handleInputChange }) => {
        return (
            <div className="form-group">
                <label>Do you want to zip the content?</label>
                <div className="form-check">
                    <input
                        type="radio"
                        className="form-check-input"
                        id="zipNo"
                        name="zipContent"
                        value="no"
                        defaultChecked
                        onChange={handleInputChange}
                    />
                    <label className="form-check-label" htmlFor="zipNo">No</label>
                </div>
                <div className="form-check">
                    <input
                        type="radio"
                        className="form-check-input"
                        id="zipYes"
                        name="zipContent"
                        value="yes"
                        onChange={handleInputChange}
                    />
                    <label className="form-check-label" htmlFor="zipYes">Yes</label>
                </div>
            </div>
        );
    };

    export default ZipContent;
    ```

7. **DownloadLocation.js**:
    ```javascript
    import React from 'react';

    const DownloadLocation = ({ handleInputChange, errors }) => {
        return (
            <div className="form-group">
                <label htmlFor="downloadLocation">Download Location</label>
                <input
                    type="text"
                    className={`form-control ${errors.downloadLocation ? 'is-invalid' : ''}`}
                    id="downloadLocation"
                    name="downloadLocation"
                    onChange={handleInputChange}
                />
                {errors.downloadLocation && <div className="text-danger">{errors.downloadLocation}</div>}
            </div>
        );
    };

    export default DownloadLocation;
    ```

8. **SubmitButton.js**:
    ```javascript
    import React from 'react';

    const SubmitButton = ({ handleSubmit }) => {
        return (
            <button type="button" className="btn btn-primary" onClick={handleSubmit}>Submit</button>
        );
    };

    export default SubmitButton;
    ```

9. **MainForm.js**:
    ```javascript
    import React, { useState } from 'react';
    import PageTitle from './PageTitle';
    import PageDescription from './PageDescription';
    import SiteURL from './SiteURL';
    import Assets from './Assets';
    import ZipContent from './ZipContent';
    import DownloadLocation from './DownloadLocation';
    import SubmitButton from './SubmitButton';

    const MainForm = () => {
        const [formData, setFormData] = useState({});
        const [errors, setErrors] = useState({});

        const handleInputChange = (e) => {
            const { name, value, type, checked } = e.target;
            const newValue = type === 'checkbox' ? checked : value;
            setFormData({ ...formData, [name]: newValue });
        };

        const validate = () => {
            const newErrors = {};
            if (!formData.siteUrl) {
                newErrors.siteUrl = "Site URL is required";
            }
            if (!formData.assets) {
                newErrors.assets = "At least one asset type must be selected";
            }
            if (formData.library && !formData.libraryUrl) {
                newErrors.libraryUrl = "Library URL is required";
            }
            if (formData.list && !formData.listUrl) {
                newErrors.listUrl = "List URL is required";
            }
            if (formData.folder && !formData.folderUrl) {
                newErrors.folderUrl = "Folder URL is required";
            }
            if (!formData.downloadLocation) {
                newErrors.downloadLocation = "Download location is required";
            }
            return newErrors;
        };

        const handleSubmit = () => {
            const newErrors = validate();
            if (Object.keys(newErrors).length > 0) {
                setErrors(newErrors);
            } else {
                // Submit form data to the database                
                console.log(formData);
                // Here you can add the logic to submit the form data to the database
                // Example: axios.post('/api/submit', formData)
            }
        };

        return (
            <div className="container">
                <PageTitle />
                <PageDescription />
                <form>
                    <SiteURL handleInputChange={handleInputChange} errors={errors} />
                    <Assets handleInputChange={handleInputChange} errors={errors} />
                    <ZipContent handleInputChange={handleInputChange} />
                    <DownloadLocation handleInputChange={handleInputChange} errors={errors} />
                    <SubmitButton handleSubmit={handleSubmit} />
                </form>
            </div>
        );
    };

    export default MainForm;
    ```

### Step 4: Create Dummy JSON Data for Autocomplete

Create a `data` folder in the `src` directory and add a `sites.json` file with the following dummy data:

```json
[
    "https://example.com/site1",
    "https://example.com/site2",
    "https://example.com/site3"
]
```

### Step 5: Update App Component

1. **Update `src/App.js`**:
    ```javascript
    import React from 'react';
    import MainForm from './components/MainForm';

    function App() {
        return (
            <div className="App">
                <MainForm />
            </div>
        );
    }

    export default App;
    ```

### Step 6: Run the Project

1. **Start the Development Server**:
    ```bash
    npm start
    ```

### Additional Enhancements

1. **Error Handling**:
    - Ensure that error messages are displayed dynamically as users interact with the form fields. Use Bootstrap's `text-danger` class for visibility.

2. **Form Styling**:
    - Use Bootstrap's grid system to align the form elements neatly.
    - Ensure the form is fully responsive and visually appealing.

### Example CSS (Optional)

If you need custom styles, create a `src/App.css` file and import it in `src/App.js`:

```css
.suggestions {
    border: 1px solid #ccc;
    max-height: 150px;
    overflow-y: auto;
}

.suggestions div {
    padding: 10px;
    cursor: pointer;
}

.suggestions div:hover {
    background-color: #f0f0f0;
}
```

```javascript
import './App.css';
```

### Conclusion

This detailed guide provides step-by-step instructions to build the 'SPO Site Downloader' form using React and Bootstrap. It includes creating subcomponents, adding validation, handling errors, and ensuring the form is responsive and user-friendly. You can further customize the form and add additional functionality as needed.

dropdownlocation.json
[
    "Save Location Path 1",
    "Save Location Path 2",
    "Save Location Path 3",
    "Save Location Path 4",
    "Save Location Path 5"
]

DownloadLocation.js
import React, { useState, useEffect } from 'react';
import dropdownData from '../data/dropdownlocation.json';

const DownloadLocation = ({ handleInputChange, errors }) => {
    const [selectedLocation, setSelectedLocation] = useState("");

    useEffect(() => {
        if (selectedLocation) {
            handleInputChange({
                target: {
                    name: 'downloadLocation',
                    value: selectedLocation,
                }
            });
        }
    }, [selectedLocation, handleInputChange]);

    return (
        <div className="form-group">
            <label htmlFor="downloadLocation">Download Location</label>
            <select
                className={`form-control ${errors.downloadLocation ? 'is-invalid' : ''}`}
                id="downloadLocation"
                name="downloadLocation"
                value={selectedLocation}
                onChange={(e) => setSelectedLocation(e.target.value)}
            >
                <option value="">Select a location</option>
                {dropdownData.map((location, index) => (
                    <option key={index} value={location}>
                        {location}
                    </option>
                ))}
            </select>
            {errors.downloadLocation && <div className="text-danger">{errors.downloadLocation}</div>}
        </div>
    );
};

export default DownloadLocation;



Final Adjustments
Ensure that DownloadLocation.js is properly imported and used in MainForm.js as before. Here's the final MainForm.js for reference:
import React, { useState } from 'react';
import PageTitle from './PageTitle';
import PageDescription from './PageDescription';
import SiteURL from './SiteURL';
import Assets from './Assets';
import ZipContent from './ZipContent';
import DownloadLocation from './DownloadLocation';
import SubmitButton from './SubmitButton';

const MainForm = () => {
    const [formData, setFormData] = useState({});
    const [errors, setErrors] = useState({});

    const handleInputChange = (e) => {
        const { name, value, type, checked } = e.target;
        const newValue = type === 'checkbox' ? checked : value;
        setFormData({ ...formData, [name]: newValue });
    };

    const validate = () => {
        const newErrors = {};
        if (!formData.siteUrl) {
            newErrors.siteUrl = "Site URL is required";
        }
        if (!formData.assets) {
            newErrors.assets = "At least one asset type must be selected";
        }
        if (formData.library && !formData.libraryUrl) {
            newErrors.libraryUrl = "Library URL is required";
        }
        if (formData.list && !formData.listUrl) {
            newErrors.listUrl = "List URL is required";
        }
        if (formData.folder && !formData.folderUrl) {
            newErrors.folderUrl = "Folder URL is required";
        }
        if (!formData.downloadLocation) {
            newErrors.downloadLocation = "Download location is required";
        }
        return newErrors;
    };

    const handleSubmit = () => {
        const newErrors = validate();
        if (Object.keys(newErrors).length > 0) {
            setErrors(newErrors);
        } else {
            // Submit form data to the database
            console.log(formData);
            // Here you can add the logic to submit the form data to the database
            // Example: axios.post('/api/submit', formData)
        }
    };

    return (
        <div className="container">
            <PageTitle />
            <PageDescription />
            <form>
                <SiteURL handleInputChange={handleInputChange} errors={errors} />
                <Assets handleInputChange={handleInputChange} errors={errors} />
                <ZipContent handleInputChange={handleInputChange} />
                <DownloadLocation handleInputChange={handleInputChange} errors={errors} />
                <SubmitButton handleSubmit={handleSubmit} />
            </form>
        </div>
    );
};

export default MainForm;



